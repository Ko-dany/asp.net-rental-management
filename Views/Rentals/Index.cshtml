@model IEnumerable<Midterm_EquipmentRental.Models.Rental>
@using Midterm_EquipmentRental.Models

@{
    ViewData["Title"] = "All Rentals";

    // Filtering: expected filter name passed from controller or ViewBag
    string current = (ViewBag.Filter ?? "All").ToString();

    // Consider rentals overdue if kept more than this many days
    const int graceDays = 7;

    IEnumerable<Rental> items =
        current.Equals("Active", StringComparison.OrdinalIgnoreCase) ? Model.Where(r => r.Status == RentalStatus.Active) :
        current.Equals("Completed", StringComparison.OrdinalIgnoreCase) ? Model.Where(r => r.Status == RentalStatus.Returned) :
        current.Equals("Overdue", StringComparison.OrdinalIgnoreCase) ? Model.Where(r => r.Status == RentalStatus.Overdue) :
                                                                           Model;

    string TabClass(string key) =>
        key == "All" ? (current == "All" ? "btn btn-outline-primary" : "btn btn-outline-primary") :
        key == "Active" ? (current == "Active" ? "btn btn-warning text-dark" : "btn btn-outline-warning") :
        key == "Completed" ? (current == "Completed" ? "btn btn-success" : "btn btn-outline-success") :
        key == "Overdue" ? (current == "Overdue" ? "btn btn-danger" : "btn btn-outline-danger") :
                              "btn btn-outline-secondary";

    string StatusBadge(RentalStatus status) =>
        status == RentalStatus.Overdue ? "badge rounded-pill bg-danger" :
        status == RentalStatus.Returned ? "badge rounded-pill bg-success" :
                                          "badge rounded-pill bg-warning text-dark";

    string StatusText(RentalStatus status) =>
        status == RentalStatus.Returned ? "Completed" :
        status == RentalStatus.Active ? "Active" : "Overdue";

    string DaysBadge(int days) =>
        days > 0 ? "badge rounded-pill bg-danger" : "badge rounded-pill bg-secondary";

    string DaysText(int days) => days > 0 ? $"{days} days" : "-";

    // Example calculation for overdue days (you can adjust logic later)
    int GetDaysOverdue(Rental r)
    {
        if (r.Status != RentalStatus.Overdue) return 0;
        var days = (DateTime.Now - r.IssuedAt).Days - 7; // sample threshold
        return days > 0 ? days : 0;
    }
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Rentals</h2>
        <div>
            @if(ViewBag.UserRole == UserRole.Admin){
                <a asp-controller="View" asp-action="IssueRental" class="btn btn-primary">Add New Rental</a>
            <a asp-controller="Rentals" asp-action="Index" class="btn btn-secondary">Back to All Rentals</a>
            }
        </div>
    </div>

    <!-- Filter tabs -->
    <div class="btn-group mb-3" role="group" aria-label="Rental Filters">
        <a asp-controller="View" asp-action="GetAllRentals" class="@TabClass("All")">All</a>
        @if (ViewBag.UserRole == UserRole.Admin) {
            <a asp-controller="View" asp-action="GetActiveRentals" class="@TabClass("Active")">Active</a>
            <a asp-controller="View" asp-action="GetCompletedRentals" class="@TabClass("Completed")">Completed</a>
            <a asp-controller="View" asp-action="GetOverdueRentals" class="@TabClass("Overdue")">Overdue</a>
        }
    </div>

    <!-- Table -->
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th style="width:7rem;">Rental ID</th>
                    <th>Equipment ID</th>
                    <th>Customer ID</th>
                    <th>Issued At</th>
                    <th>Returned At</th>
                    <th style="width:9rem;">Days Overdue</th>
                    <th style="width:8rem;">Status</th>
                    <th class="text-end" style="width:14rem;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in items)
                {
                    var daysOverdue = GetDaysOverdue(r);
                    <tr>
                        <td>@r.Id</td>
                        <td>@r.EquipmentId</td>
                        <td>@r.CustomerId</td>
                        <td>@r.IssuedAt.ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@(r.ReturnedAt == default ? "-" : r.ReturnedAt?.ToString("yyyy-MM-dd HH:mm"))</td>
                        <td><span class="@DaysBadge(daysOverdue)">@DaysText(daysOverdue)</span></td>
                        <td><span class="@StatusBadge(r.Status)">@StatusText(r.Status)</span></td>
                        <td class="text-end">
                                <input type="hidden" name="Id" value="@r.Id" />
                                <input type="hidden" name="EquipmentId" value="@r.EquipmentId" />
                                <input type="hidden" name="CustomerId" value="@r.CustomerId" />
                                <input type="hidden" name="IssuedAt" value="@r.IssuedAt.ToString("o")" />
                                <input type="hidden" name="ReturnedAt" value="@r.ReturnedAt?.ToString("o")" />
                                <input type="hidden" name="Status" value="@r.Status" />
                            @if (ViewBag.UserRole == UserRole.Admin){
                                <a asp-controller="View" asp-action="GetRentalDetails" asp-route-id="@r.Id" class="btn btn-sm btn-outline-info me-2">Details</a>
                                <a asp-controller="View" asp-action="GetExtendRental" asp-route-id="@r.Id" class="btn btn-sm btn-outline-warning me-2">Extend</a>
                                <form asp-controller="View" asp-action="ReturnRental" asp-route-id="@r.Id" method="post" class="d-inline"
                                      onsubmit="return confirm('Force return this rental?');">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-outline-danger">Force Return</button>
                                </form>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>